const uns = new Map([%USERNS%]); // replace with an list tuples: namespace => [array of locales]
const sns = new Map([%SYSNS%]); // same for system namespaces
module.exports = {
	locales: [%LANGS%], // replace with an list of quoted locales used by the project, e.g. '"en", "ar"' (note the surrounding quotes)
	defaultLocale: "%DEFAULT%", // replace with the value of the default locale, e.g. "en" (note no surrounding quotes)
	logBuild: false,
	pages: 	%PAGES%, // replace with JSON.stringify(pages: Record<string, string[]>), e.g. JSON.stringify({ docs: ["glossary", "authors"]})
	dictionaries: %DICTIONARIES%, // Replace with e.g. JSON.stringify({ system: { docs: "./locales/%LANG%/docs.json" }, project: { authors: "./public/locales/%LANG%/authors.json" } }, )
	loadLocaleFrom: async (lang, ns) => {
		const ret = {};

        const sarr = sns.get(ns);
		if (sarr) {
            if (sarr.includes(lang)) {
                const m = await import(`./locales/${lang}/${ns}.json`);
                Object.assign(ret, m.default);
            }
            else {
                const m = await import(`./locales/en/${ns}.json`);
                Object.assign(ret, m.default);
            }
		}

        const uarr = uns.get(ns);
		if (uarr) {
            if (uarr.includes((lang))) {
                const m = await import(`./public/yaspp/locales/${lang}/${ns}.json`);
                Object.assign(ret, m.default);
            }
            else {
                const m = await import(`./public/yaspp/locales/en/${ns}.json`);
                Object.assign(ret, m.default);
            }
		}

		return ret;
	}
}