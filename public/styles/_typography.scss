@use "sass:map";
@use "sass:list";
@use "lib/merge";
@use "lib/lookup";

@function load($overrides: ()) {
	$default: (
		font-family: (
			font1: 'Roboto Slab, serif',
			font2: 'Assistant, sans-serif'
		),
		font-size: (
			base: 14px,
			xs: 0.7em,
			sm: 0.9em,
			md: 1em,
			lg: 1.041em,
			xl: 1.241em,
			2xl: 1.302em,
			3xl: 1.614em,
			4xl: 2.03em,
			5xl: 2.5em,
		),
		font-weight: (
			thin: 100,
			regular: 300,
			medium: 500,
			bold: 700,
		),
		line-height: (
			xs: 1.4em,
			sm: 1.4em,
			md: 1.6em,
			lg: 2em,
			xl: 3em,
		),
		spacing: (
			xs: 0.5em,
			sm: 0.75em,
			md: 1em,
			lg: 1.002em,
			xl: 1.102em,
			2xl: 1.202em,
			3xl: 1.302em,
		),
	);
    @return merge.deep($default, $overrides);
};

@mixin root($typography: ()) {
	$vars: load($typography);
	$fsz: map.get($vars, font-size);
	$ffml: map.get($vars, font-family);
	$fsz: map.get($vars, font-size);
	@debug $fsz;
	:root {
		--ml-main-font: #{map.get($ffml, font1)};
		--ml-aux-font: #{lookup.find($vars, "font-family.font2")};
		--ml-font-size: #{map.get($fsz, base)};
		@each $size in $fsz {
			@debug "font size #{$size} #{type-of($size)}";
			--ml-font-#{list.nth($size, 1)}: #{list.nth($size, 2)};
		}
	}

	.text-tiny {
		font-size: --var(--ml-font-xs);
	}
};


